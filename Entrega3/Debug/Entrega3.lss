
Entrega3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  000004d0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800186  00800186  000005ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140a  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081b  00000000  00000000  0000263a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f9  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e4  00000000  00000000  000036f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003ed5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 38       	cpi	r26, 0x86	; 134
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e8       	ldi	r26, 0x86	; 134
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  9e:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_start>:
	TWBR=152;     // SCL frequency is 50K for XTAL = 16M
	TWCR=0x04;    // enable the TWI module
}

void i2c_start(void){
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  a6:	84 ea       	ldi	r24, 0xA4	; 164
  a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
  ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b0:	88 23       	and	r24, r24
  b2:	e4 f7       	brge	.-8      	; 0xac <i2c_start+0x6>
}
  b4:	08 95       	ret

000000b6 <i2c_write>:
void i2c_write(unsigned char data){
	TWDR = data;
  b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
  c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c4:	88 23       	and	r24, r24
  c6:	e4 f7       	brge	.-8      	; 0xc0 <i2c_write+0xa>
}
  c8:	08 95       	ret

000000ca <i2c_read>:

unsigned char i2c_read(unsigned char isLast){
	if (isLast == 0){  // send ACK
  ca:	81 11       	cpse	r24, r1
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <i2c_read+0xc>
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
  ce:	84 ec       	ldi	r24, 0xC4	; 196
  d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d4:	03 c0       	rjmp	.+6      	; 0xdc <i2c_read+0x12>
	}
	else{  // send NACK
		TWCR = (1 << TWINT) | (1 << TWEN);
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while ((TWCR & (1 << TWINT)) == 0);
  dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <i2c_read+0x12>
	return TWDR;
  e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  e8:	08 95       	ret

000000ea <i2c_stop>:

void i2c_stop(void){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
  ea:	84 e9       	ldi	r24, 0x94	; 148
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	08 95       	ret

000000f2 <Iniciar_Sistema>:
		}
    }
}

void Iniciar_Sistema(){	
	SerialPort_Init(BR9600); 		// Se inicializa en formato 8N1 y BAUDRATE = 9600bps
  f2:	87 e6       	ldi	r24, 0x67	; 103
  f4:	0e 94 b2 01 	call	0x364	; 0x364 <SerialPort_Init>
	SerialPort_TX_Enable();			// Activo el Transmisor del Puerto Serie
  f8:	0e 94 bc 01 	call	0x378	; 0x378 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
  fc:	0e 94 c2 01 	call	0x384	; 0x384 <SerialPort_RX_Enable>
	SerialPort_Send_String("Presionando S se detiene/reanuda el sistema\n\r");   // Envío el mensaje
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
 108:	0e 94 c8 01 	call	0x390	; 0x390 <SerialPort_RX_Interrupt_Enable>
	sei();								// Activo la mascara global de interrupciones (Bit I del SREG en 1)
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <chequeoEntrada>:
}

void chequeoEntrada(){
	if(RX_Buffer){ // recepción NO Bloqueante
 110:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <RX_Buffer>
 114:	88 23       	and	r24, r24
 116:	c1 f0       	breq	.+48     	; 0x148 <chequeoEntrada+0x38>
		// Si presiona 's', se deja de recibir o se comienza a recibir
		if(RX_Buffer == 's'){
 118:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <RX_Buffer>
 11c:	83 37       	cpi	r24, 0x73	; 115
 11e:	91 f4       	brne	.+36     	; 0x144 <chequeoEntrada+0x34>
			dejarDeRecibir = !dejarDeRecibir;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <__data_end>
 126:	91 11       	cpse	r25, r1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
			
			if(dejarDeRecibir){
 12e:	88 23       	and	r24, r24
 130:	29 f0       	breq	.+10     	; 0x13c <chequeoEntrada+0x2c>
				SerialPort_Send_String("Recepcion detenida\n\r");
 132:	8e e2       	ldi	r24, 0x2E	; 46
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
 13a:	04 c0       	rjmp	.+8      	; 0x144 <chequeoEntrada+0x34>
			} else {
				SerialPort_Send_String("Recepcion reanudada\n\r");
 13c:	83 e4       	ldi	r24, 0x43	; 67
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
			}
		} 		
		RX_Buffer=0;
 144:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <RX_Buffer>
 148:	08 95       	ret

0000014a <main>:
void Iniciar_Sistema(void);
void chequeoEntrada(void);


int main(void)
{	
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	00 d0       	rcall	.+0      	; 0x150 <main+0x6>
 150:	00 d0       	rcall	.+0      	; 0x152 <main+0x8>
 152:	1f 92       	push	r1
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
	uint8_t intRH,decRH,intT,decT,checkS,exito;
	
	uint8_t sec, min, hs, dia, date, mes, anio, i;
	
	Iniciar_Sistema();
 158:	0e 94 79 00 	call	0xf2	; 0xf2 <Iniciar_Sistema>
	
    while (1) 
    {

		
		chequeoEntrada();	
 15c:	0e 94 88 00 	call	0x110	; 0x110 <chequeoEntrada>
		if(!dejarDeRecibir){
 160:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
 164:	81 11       	cpse	r24, r1
 166:	fa cf       	rjmp	.-12     	; 0x15c <main+0x12>
			//Se llama a la función pedirTH para comenzar la configuracion del sensor y lectura de datos
			exito=pedirTH(&intRH,&decRH,&intT,&decT,&checkS);
 168:	8e 01       	movw	r16, r28
 16a:	0b 5f       	subi	r16, 0xFB	; 251
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
 16e:	9e 01       	movw	r18, r28
 170:	2c 5f       	subi	r18, 0xFC	; 252
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	ae 01       	movw	r20, r28
 176:	4d 5f       	subi	r20, 0xFD	; 253
 178:	5f 4f       	sbci	r21, 0xFF	; 255
 17a:	be 01       	movw	r22, r28
 17c:	6e 5f       	subi	r22, 0xFE	; 254
 17e:	7f 4f       	sbci	r23, 0xFF	; 255
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	0e 94 56 01 	call	0x2ac	; 0x2ac <pedirTH>
 188:	f8 2e       	mov	r15, r24
			
			i2c_start();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_start>
			i2c_write(0b11010001);
 18e:	81 ed       	ldi	r24, 0xD1	; 209
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
			i2c_write(0x00);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_write>
			sec = i2c_read(1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 65 00 	call	0xca	; 0xca <i2c_read>
 1a6:	08 2f       	mov	r16, r24
			min = i2c_read(1);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 65 00 	call	0xca	; 0xca <i2c_read>
 1b0:	18 2f       	mov	r17, r24
			hs = i2c_read(1);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 65 00 	call	0xca	; 0xca <i2c_read>
			dia= i2c_read(1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 65 00 	call	0xca	; 0xca <i2c_read>
			date = i2c_read(1);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 65 00 	call	0xca	; 0xca <i2c_read>
			mes = i2c_read(1);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 65 00 	call	0xca	; 0xca <i2c_read>
			anio = i2c_read(1);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 65 00 	call	0xca	; 0xca <i2c_read>
			i2c_stop();
 1da:	0e 94 75 00 	call	0xea	; 0xea <i2c_stop>
			
			sec = sec & 0x7F;
 1de:	0f 77       	andi	r16, 0x7F	; 127
			min = min & 0x7F;
 1e0:	1f 77       	andi	r17, 0x7F	; 127
					
			//Si se realizó una correcta lectura, la función pedirTH devuelve 1. Caso contrario hubo un error
			if(exito){
 1e2:	ff 20       	and	r15, r15
 1e4:	09 f1       	breq	.+66     	; 0x228 <main+0xde>
				SerialPort_Send_String("TEMP: ");
 1e6:	89 e5       	ldi	r24, 0x59	; 89
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
				//SerialPort_Send_Data("A");
				SerialPort_Send2_uint8_t(intT);
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SerialPort_Send2_uint8_t>
				SerialPort_Send_String("\n\rHUMEDAD: ");
 1f4:	80 e6       	ldi	r24, 0x60	; 96
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
				SerialPort_Send2_uint8_t(intRH);
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SerialPort_Send2_uint8_t>
				SerialPort_Send_String("\n\r");
 202:	86 e5       	ldi	r24, 0x56	; 86
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
				SerialPort_Send_String("Hora: ");
 20a:	8c e6       	ldi	r24, 0x6C	; 108
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
				SerialPort_Send2_uint8_t(sec);
 212:	80 2f       	mov	r24, r16
 214:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SerialPort_Send2_uint8_t>
				SerialPort_Send2_uint8_t(min);
 218:	81 2f       	mov	r24, r17
 21a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SerialPort_Send2_uint8_t>
				SerialPort_Send_String("\n\r");
 21e:	86 e5       	ldi	r24, 0x56	; 86
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
 226:	04 c0       	rjmp	.+8      	; 0x230 <main+0xe6>
				}else{
				SerialPort_Send_String("\n\rERROR DE LECTURA");
 228:	83 e7       	ldi	r24, 0x73	; 115
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <SerialPort_Send_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	83 ed       	ldi	r24, 0xD3	; 211
 234:	90 e3       	ldi	r25, 0x30	; 48
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0xec>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0xf6>
 240:	00 00       	nop
 242:	8c cf       	rjmp	.-232    	; 0x15c <main+0x12>

00000244 <__vector_18>:
		} 		
		RX_Buffer=0;
	}
}

ISR(USART_RX_vect){
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
	RX_Buffer = UDR0; //la lectura del UDR borra flag RXC
 250:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 254:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <RX_Buffer>
}
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <leer8B>:
	sum=(*intRH)+(*decRH)+(*intT)+(*decT);

	return sum==(*checkS);
}

void leer8B(uint8_t* auxBits){
 264:	fc 01       	movw	r30, r24
	int i;
	*auxBits=0;
 266:	10 82       	st	Z, r1
	for(i=0;i<8;i++){
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	1b c0       	rjmp	.+54     	; 0x2a4 <leer8B+0x40>
		while((PINC & (1<<PINC0))==0){}
 26e:	30 9b       	sbis	0x06, 0	; 6
 270:	fe cf       	rjmp	.-4      	; 0x26e <leer8B+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	85 ed       	ldi	r24, 0xD5	; 213
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <leer8B+0x10>
 278:	00 00       	nop
		_delay_us(40);
		if((PINC & (1<<PINC0))==1){
 27a:	30 9b       	sbis	0x06, 0	; 6
 27c:	11 c0       	rjmp	.+34     	; 0x2a0 <leer8B+0x3c>
			*auxBits |= (1<<(7-i));
 27e:	67 e0       	ldi	r22, 0x07	; 7
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	62 1b       	sub	r22, r18
 284:	73 0b       	sbc	r23, r19
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <leer8B+0x2c>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <leer8B+0x28>
 294:	80 81       	ld	r24, Z
 296:	48 2b       	or	r20, r24
 298:	40 83       	st	Z, r20
 29a:	80 ea       	ldi	r24, 0xA0	; 160
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <leer8B+0x38>
}

void leer8B(uint8_t* auxBits){
	int i;
	*auxBits=0;
	for(i=0;i<8;i++){
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	28 30       	cpi	r18, 0x08	; 8
 2a6:	31 05       	cpc	r19, r1
 2a8:	14 f3       	brlt	.-60     	; 0x26e <leer8B+0xa>
		if((PINC & (1<<PINC0))==1){
			*auxBits |= (1<<(7-i));
			_delay_us(30);
		}
	}
}
 2aa:	08 95       	ret

000002ac <pedirTH>:
#include "sensor.h"

uint8_t pedirTH(uint8_t* intRH, uint8_t* decRH, uint8_t* intT,uint8_t* decT, uint8_t* checkS ){
 2ac:	af 92       	push	r10
 2ae:	bf 92       	push	r11
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	5c 01       	movw	r10, r24
 2c2:	6b 01       	movw	r12, r22
 2c4:	7a 01       	movw	r14, r20
 2c6:	e9 01       	movw	r28, r18
	
	//------Host's Signal------
	//Se configura el sensor para encuestarlo:
	//Pin como salida -> Enviar un 1 (5ms) -> enviar un 0 (18ms) "start signal" y un 1 (20-40us) "wait for sensor's response"
	
	DDRC |= (1<<PINC0);
 2c8:	87 b1       	in	r24, 0x07	; 7
 2ca:	81 60       	ori	r24, 0x01	; 1
 2cc:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PINC0);
 2ce:	88 b1       	in	r24, 0x08	; 8
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	88 b9       	out	0x08, r24	; 8
 2d4:	2a e1       	ldi	r18, 0x1A	; 26
 2d6:	2a 95       	dec	r18
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <pedirTH+0x2a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <pedirTH+0x30>
	_delay_us(5);
	PORTC &= ~(1<<PINC0);
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	90 ee       	ldi	r25, 0xE0	; 224
 2e6:	e0 e0       	ldi	r30, 0x00	; 0
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e0 40       	sbci	r30, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <pedirTH+0x3c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <pedirTH+0x46>
 2f2:	00 00       	nop
	_delay_ms(18);
	PORTC |= (1<<PINC0);
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	f0 ea       	ldi	r31, 0xA0	; 160
 2fc:	fa 95       	dec	r31
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <pedirTH+0x50>
	
	//------Sensor's signal-----
	//DDRC se configura como entrada para recibir respuesta del sensor
	
	//El sensor envía dos señales de 80us cada una y comienza el envío de datos
	DDRC &= ~(1<<PINC0);
 300:	87 b1       	in	r24, 0x07	; 7
 302:	8e 7f       	andi	r24, 0xFE	; 254
 304:	87 b9       	out	0x07, r24	; 7
 306:	8f e7       	ldi	r24, 0x7F	; 127
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <pedirTH+0x5e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <pedirTH+0x64>
 310:	00 00       	nop
	_delay_us(160);
	
	leer8B(intRH);
 312:	c5 01       	movw	r24, r10
 314:	0e 94 32 01 	call	0x264	; 0x264 <leer8B>
	leer8B(decRH);
 318:	c6 01       	movw	r24, r12
 31a:	0e 94 32 01 	call	0x264	; 0x264 <leer8B>
	leer8B(intT);
 31e:	c7 01       	movw	r24, r14
 320:	0e 94 32 01 	call	0x264	; 0x264 <leer8B>
	leer8B(decT);
 324:	ce 01       	movw	r24, r28
 326:	0e 94 32 01 	call	0x264	; 0x264 <leer8B>
	leer8B(checkS);
 32a:	c8 01       	movw	r24, r16
 32c:	0e 94 32 01 	call	0x264	; 0x264 <leer8B>
	
	sum=(*intRH)+(*decRH)+(*intT)+(*decT);
 330:	f5 01       	movw	r30, r10
 332:	30 81       	ld	r19, Z
 334:	f6 01       	movw	r30, r12
 336:	90 81       	ld	r25, Z
 338:	f7 01       	movw	r30, r14
 33a:	20 81       	ld	r18, Z
 33c:	88 81       	ld	r24, Y
 33e:	93 0f       	add	r25, r19
 340:	92 0f       	add	r25, r18
 342:	98 0f       	add	r25, r24

	return sum==(*checkS);
 344:	f8 01       	movw	r30, r16
 346:	20 81       	ld	r18, Z
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	92 13       	cpse	r25, r18
 34c:	80 e0       	ldi	r24, 0x00	; 0
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	bf 90       	pop	r11
 360:	af 90       	pop	r10
 362:	08 95       	ret

00000364 <SerialPort_Init>:
	SerialPort_Wait_For_TX_Buffer_Free();
	SerialPort_Send_Data('0'+num/10);
	
	SerialPort_Wait_For_TX_Buffer_Free();
	SerialPort_Send_Data('0'+ num%10);
}
 364:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 368:	96 e0       	ldi	r25, 0x06	; 6
 36a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 36e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 372:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 376:	08 95       	ret

00000378 <SerialPort_TX_Enable>:
 378:	e1 ec       	ldi	r30, 0xC1	; 193
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	88 60       	ori	r24, 0x08	; 8
 380:	80 83       	st	Z, r24
 382:	08 95       	ret

00000384 <SerialPort_RX_Enable>:
 384:	e1 ec       	ldi	r30, 0xC1	; 193
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	80 83       	st	Z, r24
 38e:	08 95       	ret

00000390 <SerialPort_RX_Interrupt_Enable>:
 390:	e1 ec       	ldi	r30, 0xC1	; 193
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	80 68       	ori	r24, 0x80	; 128
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <SerialPort_Wait_For_TX_Buffer_Free>:
 39c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3a0:	85 ff       	sbrs	r24, 5
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <SerialPort_Wait_For_TX_Buffer_Free>
 3a4:	08 95       	ret

000003a6 <SerialPort_Send_Data>:
 3a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3aa:	08 95       	ret

000003ac <SerialPort_Send_String>:
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	7c 01       	movw	r14, r24
 3b8:	c0 e0       	ldi	r28, 0x00	; 0
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <SerialPort_Send_String+0x1e>
 3bc:	0e 94 ce 01 	call	0x39c	; 0x39c <SerialPort_Wait_For_TX_Buffer_Free>
 3c0:	f8 01       	movw	r30, r16
 3c2:	80 81       	ld	r24, Z
 3c4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SerialPort_Send_Data>
 3c8:	cf 5f       	subi	r28, 0xFF	; 255
 3ca:	87 01       	movw	r16, r14
 3cc:	0c 0f       	add	r16, r28
 3ce:	11 1d       	adc	r17, r1
 3d0:	f8 01       	movw	r30, r16
 3d2:	80 81       	ld	r24, Z
 3d4:	81 11       	cpse	r24, r1
 3d6:	f2 cf       	rjmp	.-28     	; 0x3bc <SerialPort_Send_String+0x10>
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	08 95       	ret

000003e4 <SerialPort_Send2_uint8_t>:

void SerialPort_Send2_uint8_t(uint8_t num) {
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <SerialPort_Send2_uint8_t+0xc>
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <SerialPort_Send2_uint8_t+0xe>
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
	char buffer[4]; // Para almacenar el número convertido a string (máximo 3 dígitos + terminador nulo)
	itoa(num, buffer, 10); // Convierte el número a string en base 10
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	be 01       	movw	r22, r28
 3fc:	6f 5f       	subi	r22, 0xFF	; 255
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 26 02 	call	0x44c	; 0x44c <itoa>

	// Enviar cada carácter del buffer
	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 406:	f1 2c       	mov	r15, r1
 408:	0c c0       	rjmp	.+24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		SerialPort_Wait_For_TX_Buffer_Free();
 40a:	0e 94 ce 01 	call	0x39c	; 0x39c <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(buffer[i]);
 40e:	e1 e0       	ldi	r30, 0x01	; 1
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	ec 0f       	add	r30, r28
 414:	fd 1f       	adc	r31, r29
 416:	e0 0f       	add	r30, r16
 418:	f1 1f       	adc	r31, r17
 41a:	80 81       	ld	r24, Z
 41c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SerialPort_Send_Data>
void SerialPort_Send2_uint8_t(uint8_t num) {
	char buffer[4]; // Para almacenar el número convertido a string (máximo 3 dígitos + terminador nulo)
	itoa(num, buffer, 10); // Convierte el número a string en base 10

	// Enviar cada carácter del buffer
	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 420:	f3 94       	inc	r15
 422:	0f 2d       	mov	r16, r15
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	e1 e0       	ldi	r30, 0x01	; 1
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	ec 0f       	add	r30, r28
 42c:	fd 1f       	adc	r31, r29
 42e:	e0 0f       	add	r30, r16
 430:	f1 1f       	adc	r31, r17
 432:	80 81       	ld	r24, Z
 434:	81 11       	cpse	r24, r1
 436:	e9 cf       	rjmp	.-46     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		SerialPort_Wait_For_TX_Buffer_Free();
		SerialPort_Send_Data(buffer[i]);
	}
}
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	08 95       	ret

0000044c <itoa>:
 44c:	45 32       	cpi	r20, 0x25	; 37
 44e:	51 05       	cpc	r21, r1
 450:	20 f4       	brcc	.+8      	; 0x45a <itoa+0xe>
 452:	42 30       	cpi	r20, 0x02	; 2
 454:	10 f0       	brcs	.+4      	; 0x45a <itoa+0xe>
 456:	0c 94 31 02 	jmp	0x462	; 0x462 <__itoa_ncheck>
 45a:	fb 01       	movw	r30, r22
 45c:	10 82       	st	Z, r1
 45e:	cb 01       	movw	r24, r22
 460:	08 95       	ret

00000462 <__itoa_ncheck>:
 462:	bb 27       	eor	r27, r27
 464:	4a 30       	cpi	r20, 0x0A	; 10
 466:	31 f4       	brne	.+12     	; 0x474 <__itoa_ncheck+0x12>
 468:	99 23       	and	r25, r25
 46a:	22 f4       	brpl	.+8      	; 0x474 <__itoa_ncheck+0x12>
 46c:	bd e2       	ldi	r27, 0x2D	; 45
 46e:	90 95       	com	r25
 470:	81 95       	neg	r24
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__utoa_common>

00000478 <__utoa_ncheck>:
 478:	bb 27       	eor	r27, r27

0000047a <__utoa_common>:
 47a:	fb 01       	movw	r30, r22
 47c:	55 27       	eor	r21, r21
 47e:	aa 27       	eor	r26, r26
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	aa 1f       	adc	r26, r26
 486:	a4 17       	cp	r26, r20
 488:	10 f0       	brcs	.+4      	; 0x48e <__utoa_common+0x14>
 48a:	a4 1b       	sub	r26, r20
 48c:	83 95       	inc	r24
 48e:	50 51       	subi	r21, 0x10	; 16
 490:	b9 f7       	brne	.-18     	; 0x480 <__utoa_common+0x6>
 492:	a0 5d       	subi	r26, 0xD0	; 208
 494:	aa 33       	cpi	r26, 0x3A	; 58
 496:	08 f0       	brcs	.+2      	; 0x49a <__utoa_common+0x20>
 498:	a9 5d       	subi	r26, 0xD9	; 217
 49a:	a1 93       	st	Z+, r26
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	79 f7       	brne	.-34     	; 0x47e <__utoa_common+0x4>
 4a0:	b1 11       	cpse	r27, r1
 4a2:	b1 93       	st	Z+, r27
 4a4:	11 92       	st	Z+, r1
 4a6:	cb 01       	movw	r24, r22
 4a8:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <strrev>

000004ac <strrev>:
 4ac:	dc 01       	movw	r26, r24
 4ae:	fc 01       	movw	r30, r24
 4b0:	67 2f       	mov	r22, r23
 4b2:	71 91       	ld	r23, Z+
 4b4:	77 23       	and	r23, r23
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <strrev+0x4>
 4b8:	32 97       	sbiw	r30, 0x02	; 2
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <strrev+0x18>
 4bc:	7c 91       	ld	r23, X
 4be:	6d 93       	st	X+, r22
 4c0:	70 83       	st	Z, r23
 4c2:	62 91       	ld	r22, -Z
 4c4:	ae 17       	cp	r26, r30
 4c6:	bf 07       	cpc	r27, r31
 4c8:	c8 f3       	brcs	.-14     	; 0x4bc <strrev+0x10>
 4ca:	08 95       	ret

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
