
Entrega3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015ca  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ea  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000094a  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c0  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ee2  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000048d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ee e7       	ldi	r30, 0x7E	; 126
  bc:	f6 e0       	ldi	r31, 0x06	; 6
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a0 30       	cpi	r26, 0x00	; 0
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <main>
  de:	0c 94 3d 03 	jmp	0x67a	; 0x67a <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <i2c_start>:
	TWCR=0x04;    // enable the TWI module
}

void i2c_start(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  e6:	84 ea       	ldi	r24, 0xA4	; 164
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
  ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	88 23       	and	r24, r24
  f2:	e4 f7       	brge	.-8      	; 0xec <i2c_start+0x6>
}
  f4:	08 95       	ret

000000f6 <i2c_write>:
void i2c_write(unsigned char data)
{
	TWDR = data;
  f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
  fa:	84 e8       	ldi	r24, 0x84	; 132
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
 100:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 104:	88 23       	and	r24, r24
 106:	e4 f7       	brge	.-8      	; 0x100 <i2c_write+0xa>
}
 108:	08 95       	ret

0000010a <i2c_read>:


unsigned char i2c_read(unsigned char isLast)
{
	if (isLast == 0)  // send ACK
 10a:	81 11       	cpse	r24, r1
 10c:	04 c0       	rjmp	.+8      	; 0x116 <i2c_read+0xc>
	{
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 10e:	84 ec       	ldi	r24, 0xC4	; 196
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 114:	03 c0       	rjmp	.+6      	; 0x11c <i2c_read+0x12>
	}
	else  // send NACK
	{
		TWCR = (1 << TWINT) | (1 << TWEN);
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while ((TWCR & (1 << TWINT)) == 0);
 11c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 120:	88 23       	and	r24, r24
 122:	e4 f7       	brge	.-8      	; 0x11c <i2c_read+0x12>
	return TWDR;
 124:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 128:	08 95       	ret

0000012a <i2c_stop>:

void i2c_stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 130:	08 95       	ret

00000132 <LCDsendChar>:
{
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
	}
}
 132:	65 b1       	in	r22, 0x05	; 5
 134:	98 2f       	mov	r25, r24
 136:	90 74       	andi	r25, 0x40	; 64
 138:	49 2f       	mov	r20, r25
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	55 95       	asr	r21
 13e:	47 95       	ror	r20
 140:	55 95       	asr	r21
 142:	47 95       	ror	r20
 144:	55 95       	asr	r21
 146:	47 95       	ror	r20
 148:	55 95       	asr	r21
 14a:	47 95       	ror	r20
 14c:	98 2f       	mov	r25, r24
 14e:	90 78       	andi	r25, 0x80	; 128
 150:	29 2f       	mov	r18, r25
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 2e       	mov	r0, r18
 156:	23 2f       	mov	r18, r19
 158:	00 0c       	add	r0, r0
 15a:	22 1f       	adc	r18, r18
 15c:	33 0b       	sbc	r19, r19
 15e:	00 0c       	add	r0, r0
 160:	22 1f       	adc	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	96 2f       	mov	r25, r22
 166:	99 7f       	andi	r25, 0xF9	; 249
 168:	49 2b       	or	r20, r25
 16a:	24 2b       	or	r18, r20
 16c:	25 b9       	out	0x05, r18	; 5
 16e:	68 b1       	in	r22, 0x08	; 8
 170:	98 2f       	mov	r25, r24
 172:	90 71       	andi	r25, 0x10	; 16
 174:	49 2f       	mov	r20, r25
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	55 95       	asr	r21
 17a:	47 95       	ror	r20
 17c:	55 95       	asr	r21
 17e:	47 95       	ror	r20
 180:	55 95       	asr	r21
 182:	47 95       	ror	r20
 184:	98 2f       	mov	r25, r24
 186:	90 72       	andi	r25, 0x20	; 32
 188:	29 2f       	mov	r18, r25
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	35 95       	asr	r19
 18e:	27 95       	ror	r18
 190:	35 95       	asr	r19
 192:	27 95       	ror	r18
 194:	35 95       	asr	r19
 196:	27 95       	ror	r18
 198:	96 2f       	mov	r25, r22
 19a:	99 7f       	andi	r25, 0xF9	; 249
 19c:	49 2b       	or	r20, r25
 19e:	24 2b       	or	r18, r20
 1a0:	28 b9       	out	0x08, r18	; 8
 1a2:	9b b1       	in	r25, 0x0b	; 11
 1a4:	92 60       	ori	r25, 0x02	; 2
 1a6:	9b b9       	out	0x0b, r25	; 11
 1a8:	9b b1       	in	r25, 0x0b	; 11
 1aa:	91 60       	ori	r25, 0x01	; 1
 1ac:	9b b9       	out	0x0b, r25	; 11
 1ae:	25 ed       	ldi	r18, 0xD5	; 213
 1b0:	2a 95       	dec	r18
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDsendChar+0x7e>
 1b4:	00 00       	nop
 1b6:	9b b1       	in	r25, 0x0b	; 11
 1b8:	9e 7f       	andi	r25, 0xFE	; 254
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	9b b1       	in	r25, 0x0b	; 11
 1be:	9d 7f       	andi	r25, 0xFD	; 253
 1c0:	9b b9       	out	0x0b, r25	; 11
 1c2:	95 ed       	ldi	r25, 0xD5	; 213
 1c4:	9a 95       	dec	r25
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCDsendChar+0x92>
 1c8:	00 00       	nop
 1ca:	65 b1       	in	r22, 0x05	; 5
 1cc:	20 e1       	ldi	r18, 0x10	; 16
 1ce:	82 9f       	mul	r24, r18
 1d0:	c0 01       	movw	r24, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	ac 01       	movw	r20, r24
 1d6:	40 74       	andi	r20, 0x40	; 64
 1d8:	55 27       	eor	r21, r21
 1da:	55 95       	asr	r21
 1dc:	47 95       	ror	r20
 1de:	55 95       	asr	r21
 1e0:	47 95       	ror	r20
 1e2:	55 95       	asr	r21
 1e4:	47 95       	ror	r20
 1e6:	55 95       	asr	r21
 1e8:	47 95       	ror	r20
 1ea:	9c 01       	movw	r18, r24
 1ec:	20 78       	andi	r18, 0x80	; 128
 1ee:	33 27       	eor	r19, r19
 1f0:	02 2e       	mov	r0, r18
 1f2:	23 2f       	mov	r18, r19
 1f4:	00 0c       	add	r0, r0
 1f6:	22 1f       	adc	r18, r18
 1f8:	33 0b       	sbc	r19, r19
 1fa:	00 0c       	add	r0, r0
 1fc:	22 1f       	adc	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	36 2f       	mov	r19, r22
 202:	39 7f       	andi	r19, 0xF9	; 249
 204:	43 2b       	or	r20, r19
 206:	24 2b       	or	r18, r20
 208:	25 b9       	out	0x05, r18	; 5
 20a:	48 b1       	in	r20, 0x08	; 8
 20c:	9c 01       	movw	r18, r24
 20e:	20 71       	andi	r18, 0x10	; 16
 210:	33 27       	eor	r19, r19
 212:	35 95       	asr	r19
 214:	27 95       	ror	r18
 216:	35 95       	asr	r19
 218:	27 95       	ror	r18
 21a:	35 95       	asr	r19
 21c:	27 95       	ror	r18
 21e:	80 72       	andi	r24, 0x20	; 32
 220:	99 27       	eor	r25, r25
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	95 95       	asr	r25
 228:	87 95       	ror	r24
 22a:	95 95       	asr	r25
 22c:	87 95       	ror	r24
 22e:	94 2f       	mov	r25, r20
 230:	99 7f       	andi	r25, 0xF9	; 249
 232:	29 2b       	or	r18, r25
 234:	82 2b       	or	r24, r18
 236:	88 b9       	out	0x08, r24	; 8
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	8b b9       	out	0x0b, r24	; 11
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	81 60       	ori	r24, 0x01	; 1
 242:	8b b9       	out	0x0b, r24	; 11
 244:	85 ed       	ldi	r24, 0xD5	; 213
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDsendChar+0x114>
 24a:	00 00       	nop
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	8b b9       	out	0x0b, r24	; 11
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	8d 7f       	andi	r24, 0xFD	; 253
 256:	8b b9       	out	0x0b, r24	; 11
 258:	95 ed       	ldi	r25, 0xD5	; 213
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCDsendChar+0x128>
 25e:	00 00       	nop
 260:	08 95       	ret

00000262 <LCDsendCommand>:
 262:	65 b1       	in	r22, 0x05	; 5
 264:	98 2f       	mov	r25, r24
 266:	90 74       	andi	r25, 0x40	; 64
 268:	49 2f       	mov	r20, r25
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	55 95       	asr	r21
 26e:	47 95       	ror	r20
 270:	55 95       	asr	r21
 272:	47 95       	ror	r20
 274:	55 95       	asr	r21
 276:	47 95       	ror	r20
 278:	55 95       	asr	r21
 27a:	47 95       	ror	r20
 27c:	98 2f       	mov	r25, r24
 27e:	90 78       	andi	r25, 0x80	; 128
 280:	29 2f       	mov	r18, r25
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	02 2e       	mov	r0, r18
 286:	23 2f       	mov	r18, r19
 288:	00 0c       	add	r0, r0
 28a:	22 1f       	adc	r18, r18
 28c:	33 0b       	sbc	r19, r19
 28e:	00 0c       	add	r0, r0
 290:	22 1f       	adc	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	96 2f       	mov	r25, r22
 296:	99 7f       	andi	r25, 0xF9	; 249
 298:	49 2b       	or	r20, r25
 29a:	24 2b       	or	r18, r20
 29c:	25 b9       	out	0x05, r18	; 5
 29e:	68 b1       	in	r22, 0x08	; 8
 2a0:	98 2f       	mov	r25, r24
 2a2:	90 71       	andi	r25, 0x10	; 16
 2a4:	49 2f       	mov	r20, r25
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	55 95       	asr	r21
 2aa:	47 95       	ror	r20
 2ac:	55 95       	asr	r21
 2ae:	47 95       	ror	r20
 2b0:	55 95       	asr	r21
 2b2:	47 95       	ror	r20
 2b4:	98 2f       	mov	r25, r24
 2b6:	90 72       	andi	r25, 0x20	; 32
 2b8:	29 2f       	mov	r18, r25
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	35 95       	asr	r19
 2be:	27 95       	ror	r18
 2c0:	35 95       	asr	r19
 2c2:	27 95       	ror	r18
 2c4:	35 95       	asr	r19
 2c6:	27 95       	ror	r18
 2c8:	96 2f       	mov	r25, r22
 2ca:	99 7f       	andi	r25, 0xF9	; 249
 2cc:	49 2b       	or	r20, r25
 2ce:	24 2b       	or	r18, r20
 2d0:	28 b9       	out	0x08, r18	; 8
 2d2:	9b b1       	in	r25, 0x0b	; 11
 2d4:	91 60       	ori	r25, 0x01	; 1
 2d6:	9b b9       	out	0x0b, r25	; 11
 2d8:	ef e9       	ldi	r30, 0x9F	; 159
 2da:	ff e0       	ldi	r31, 0x0F	; 15
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCDsendCommand+0x7a>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCDsendCommand+0x80>
 2e2:	00 00       	nop
 2e4:	9b b1       	in	r25, 0x0b	; 11
 2e6:	9e 7f       	andi	r25, 0xFE	; 254
 2e8:	9b b9       	out	0x0b, r25	; 11
 2ea:	ef e9       	ldi	r30, 0x9F	; 159
 2ec:	ff e0       	ldi	r31, 0x0F	; 15
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCDsendCommand+0x8c>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCDsendCommand+0x92>
 2f4:	00 00       	nop
 2f6:	65 b1       	in	r22, 0x05	; 5
 2f8:	f0 e1       	ldi	r31, 0x10	; 16
 2fa:	8f 9f       	mul	r24, r31
 2fc:	c0 01       	movw	r24, r0
 2fe:	11 24       	eor	r1, r1
 300:	ac 01       	movw	r20, r24
 302:	40 74       	andi	r20, 0x40	; 64
 304:	55 27       	eor	r21, r21
 306:	55 95       	asr	r21
 308:	47 95       	ror	r20
 30a:	55 95       	asr	r21
 30c:	47 95       	ror	r20
 30e:	55 95       	asr	r21
 310:	47 95       	ror	r20
 312:	55 95       	asr	r21
 314:	47 95       	ror	r20
 316:	9c 01       	movw	r18, r24
 318:	20 78       	andi	r18, 0x80	; 128
 31a:	33 27       	eor	r19, r19
 31c:	02 2e       	mov	r0, r18
 31e:	23 2f       	mov	r18, r19
 320:	00 0c       	add	r0, r0
 322:	22 1f       	adc	r18, r18
 324:	33 0b       	sbc	r19, r19
 326:	00 0c       	add	r0, r0
 328:	22 1f       	adc	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	36 2f       	mov	r19, r22
 32e:	39 7f       	andi	r19, 0xF9	; 249
 330:	43 2b       	or	r20, r19
 332:	24 2b       	or	r18, r20
 334:	25 b9       	out	0x05, r18	; 5
 336:	48 b1       	in	r20, 0x08	; 8
 338:	9c 01       	movw	r18, r24
 33a:	20 71       	andi	r18, 0x10	; 16
 33c:	33 27       	eor	r19, r19
 33e:	35 95       	asr	r19
 340:	27 95       	ror	r18
 342:	35 95       	asr	r19
 344:	27 95       	ror	r18
 346:	35 95       	asr	r19
 348:	27 95       	ror	r18
 34a:	80 72       	andi	r24, 0x20	; 32
 34c:	99 27       	eor	r25, r25
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	95 95       	asr	r25
 354:	87 95       	ror	r24
 356:	95 95       	asr	r25
 358:	87 95       	ror	r24
 35a:	94 2f       	mov	r25, r20
 35c:	99 7f       	andi	r25, 0xF9	; 249
 35e:	29 2b       	or	r18, r25
 360:	82 2b       	or	r24, r18
 362:	88 b9       	out	0x08, r24	; 8
 364:	8b b1       	in	r24, 0x0b	; 11
 366:	81 60       	ori	r24, 0x01	; 1
 368:	8b b9       	out	0x0b, r24	; 11
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	9f e0       	ldi	r25, 0x0F	; 15
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDsendCommand+0x10c>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCDsendCommand+0x112>
 374:	00 00       	nop
 376:	8b b1       	in	r24, 0x0b	; 11
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	8b b9       	out	0x0b, r24	; 11
 37c:	ef e9       	ldi	r30, 0x9F	; 159
 37e:	ff e0       	ldi	r31, 0x0F	; 15
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCDsendCommand+0x11e>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCDsendCommand+0x124>
 386:	00 00       	nop
 388:	08 95       	ret

0000038a <LCDclr>:
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 31 01 	call	0x262	; 0x262 <LCDsendCommand>
 390:	08 95       	ret

00000392 <LCDGotoXY>:
 392:	62 30       	cpi	r22, 0x02	; 2
 394:	31 f0       	breq	.+12     	; 0x3a2 <LCDGotoXY+0x10>
 396:	63 30       	cpi	r22, 0x03	; 3
 398:	31 f0       	breq	.+12     	; 0x3a6 <LCDGotoXY+0x14>
 39a:	61 30       	cpi	r22, 0x01	; 1
 39c:	29 f4       	brne	.+10     	; 0x3a8 <LCDGotoXY+0x16>
 39e:	80 5c       	subi	r24, 0xC0	; 192
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <LCDGotoXY+0x16>
 3a2:	8c 5e       	subi	r24, 0xEC	; 236
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <LCDGotoXY+0x16>
 3a6:	8c 5a       	subi	r24, 0xAC	; 172
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	0e 94 31 01 	call	0x262	; 0x262 <LCDsendCommand>
 3ae:	08 95       	ret

000003b0 <LCDdefinechar>:
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	7c 01       	movw	r14, r24
 3be:	86 2f       	mov	r24, r22
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	c0 e0       	ldi	r28, 0x00	; 0
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <LCDdefinechar+0x40>
 3d6:	f7 01       	movw	r30, r14
 3d8:	ec 0f       	add	r30, r28
 3da:	fd 1f       	adc	r31, r29
 3dc:	14 91       	lpm	r17, Z
 3de:	01 e0       	ldi	r16, 0x01	; 1
 3e0:	08 0f       	add	r16, r24
 3e2:	0e 94 31 01 	call	0x262	; 0x262 <LCDsendCommand>
 3e6:	81 2f       	mov	r24, r17
 3e8:	0e 94 99 00 	call	0x132	; 0x132 <LCDsendChar>
 3ec:	21 96       	adiw	r28, 0x01	; 1
 3ee:	80 2f       	mov	r24, r16
 3f0:	c8 30       	cpi	r28, 0x08	; 8
 3f2:	d1 05       	cpc	r29, r1
 3f4:	80 f3       	brcs	.-32     	; 0x3d6 <LCDdefinechar+0x26>
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	08 95       	ret

00000404 <LCDinit>:
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	8f e5       	ldi	r24, 0x5F	; 95
 40a:	9a ee       	ldi	r25, 0xEA	; 234
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <LCDinit+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <LCDinit+0xe>
 412:	00 00       	nop
 414:	85 b1       	in	r24, 0x05	; 5
 416:	89 7f       	andi	r24, 0xF9	; 249
 418:	85 b9       	out	0x05, r24	; 5
 41a:	88 b1       	in	r24, 0x08	; 8
 41c:	89 7f       	andi	r24, 0xF9	; 249
 41e:	88 b9       	out	0x08, r24	; 8
 420:	1b b8       	out	0x0b, r1	; 11
 422:	87 b1       	in	r24, 0x07	; 7
 424:	86 60       	ori	r24, 0x06	; 6
 426:	87 b9       	out	0x07, r24	; 7
 428:	84 b1       	in	r24, 0x04	; 4
 42a:	86 60       	ori	r24, 0x06	; 6
 42c:	84 b9       	out	0x04, r24	; 4
 42e:	84 b1       	in	r24, 0x04	; 4
 430:	86 60       	ori	r24, 0x06	; 6
 432:	84 b9       	out	0x04, r24	; 4
 434:	87 b1       	in	r24, 0x07	; 7
 436:	86 60       	ori	r24, 0x06	; 6
 438:	87 b9       	out	0x07, r24	; 7
 43a:	8a b1       	in	r24, 0x0a	; 10
 43c:	83 60       	ori	r24, 0x03	; 3
 43e:	8a b9       	out	0x0a, r24	; 10
 440:	85 b1       	in	r24, 0x05	; 5
 442:	89 7f       	andi	r24, 0xF9	; 249
 444:	85 b9       	out	0x05, r24	; 5
 446:	88 b1       	in	r24, 0x08	; 8
 448:	86 60       	ori	r24, 0x06	; 6
 44a:	88 b9       	out	0x08, r24	; 8
 44c:	8b b1       	in	r24, 0x0b	; 11
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	8b b9       	out	0x0b, r24	; 11
 452:	8f e9       	ldi	r24, 0x9F	; 159
 454:	9f e0       	ldi	r25, 0x0F	; 15
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <LCDinit+0x52>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <LCDinit+0x58>
 45c:	00 00       	nop
 45e:	8b b1       	in	r24, 0x0b	; 11
 460:	8e 7f       	andi	r24, 0xFE	; 254
 462:	8b b9       	out	0x0b, r24	; 11
 464:	8f e9       	ldi	r24, 0x9F	; 159
 466:	9f e0       	ldi	r25, 0x0F	; 15
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <LCDinit+0x64>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <LCDinit+0x6a>
 46e:	00 00       	nop
 470:	85 b1       	in	r24, 0x05	; 5
 472:	89 7f       	andi	r24, 0xF9	; 249
 474:	85 b9       	out	0x05, r24	; 5
 476:	88 b1       	in	r24, 0x08	; 8
 478:	86 60       	ori	r24, 0x06	; 6
 47a:	88 b9       	out	0x08, r24	; 8
 47c:	8b b1       	in	r24, 0x0b	; 11
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	8b b9       	out	0x0b, r24	; 11
 482:	8f e9       	ldi	r24, 0x9F	; 159
 484:	9f e0       	ldi	r25, 0x0F	; 15
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <LCDinit+0x82>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <LCDinit+0x88>
 48c:	00 00       	nop
 48e:	8b b1       	in	r24, 0x0b	; 11
 490:	8e 7f       	andi	r24, 0xFE	; 254
 492:	8b b9       	out	0x0b, r24	; 11
 494:	8f e9       	ldi	r24, 0x9F	; 159
 496:	9f e0       	ldi	r25, 0x0F	; 15
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCDinit+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCDinit+0x9a>
 49e:	00 00       	nop
 4a0:	85 b1       	in	r24, 0x05	; 5
 4a2:	89 7f       	andi	r24, 0xF9	; 249
 4a4:	85 b9       	out	0x05, r24	; 5
 4a6:	88 b1       	in	r24, 0x08	; 8
 4a8:	89 7f       	andi	r24, 0xF9	; 249
 4aa:	84 60       	ori	r24, 0x04	; 4
 4ac:	88 b9       	out	0x08, r24	; 8
 4ae:	8b b1       	in	r24, 0x0b	; 11
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	8b b9       	out	0x0b, r24	; 11
 4b4:	8f e9       	ldi	r24, 0x9F	; 159
 4b6:	9f e0       	ldi	r25, 0x0F	; 15
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCDinit+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCDinit+0xba>
 4be:	00 00       	nop
 4c0:	8b b1       	in	r24, 0x0b	; 11
 4c2:	8e 7f       	andi	r24, 0xFE	; 254
 4c4:	8b b9       	out	0x0b, r24	; 11
 4c6:	8f e9       	ldi	r24, 0x9F	; 159
 4c8:	9f e0       	ldi	r25, 0x0F	; 15
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCDinit+0xc6>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCDinit+0xcc>
 4d0:	00 00       	nop
 4d2:	88 e2       	ldi	r24, 0x28	; 40
 4d4:	0e 94 31 01 	call	0x262	; 0x262 <LCDsendCommand>
 4d8:	8c e0       	ldi	r24, 0x0C	; 12
 4da:	0e 94 31 01 	call	0x262	; 0x262 <LCDsendCommand>
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	c0 e0       	ldi	r28, 0x00	; 0
 4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <LCDinit+0xf4>
 4e4:	d1 e0       	ldi	r29, 0x01	; 1
 4e6:	d6 0f       	add	r29, r22
 4e8:	8c 2f       	mov	r24, r28
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	88 59       	subi	r24, 0x98	; 152
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDdefinechar>
 4f4:	c8 5f       	subi	r28, 0xF8	; 248
 4f6:	6d 2f       	mov	r22, r29
 4f8:	c0 34       	cpi	r28, 0x40	; 64
 4fa:	a0 f3       	brcs	.-24     	; 0x4e4 <LCDinit+0xe0>
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <LCDescribeDato>:


//**********   Inicio de Comando Agregado por Fido

void LCDescribeDato(int val,unsigned int field_length)
{
 502:	ef 92       	push	r14
 504:	ff 92       	push	r15
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	00 d0       	rcall	.+0      	; 0x510 <LCDescribeDato+0xe>
 510:	00 d0       	rcall	.+0      	; 0x512 <LCDescribeDato+0x10>
 512:	1f 92       	push	r1
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 51a:	fe 01       	movw	r30, r28
 51c:	31 96       	adiw	r30, 0x01	; 1
 51e:	25 e0       	ldi	r18, 0x05	; 5
 520:	df 01       	movw	r26, r30
 522:	1d 92       	st	X+, r1
 524:	2a 95       	dec	r18
 526:	e9 f7       	brne	.-6      	; 0x522 <LCDescribeDato+0x20>
	int i=4,j=0;
 528:	24 e0       	ldi	r18, 0x04	; 4
 52a:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 52c:	0f c0       	rjmp	.+30     	; 0x54c <LCDescribeDato+0x4a>
	{
	str[i]=val%10;
 52e:	6a e0       	ldi	r22, 0x0A	; 10
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	0e 94 15 03 	call	0x62a	; 0x62a <__divmodhi4>
 536:	e1 e0       	ldi	r30, 0x01	; 1
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	ec 0f       	add	r30, r28
 53c:	fd 1f       	adc	r31, r29
 53e:	e2 0f       	add	r30, r18
 540:	f3 1f       	adc	r31, r19
 542:	80 83       	st	Z, r24
	val=val/10;
 544:	86 2f       	mov	r24, r22
 546:	97 2f       	mov	r25, r23
	i--;
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	79 f7       	brne	.-34     	; 0x52e <LCDescribeDato+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 550:	bf ef       	ldi	r27, 0xFF	; 255
 552:	eb 16       	cp	r14, r27
 554:	fb 06       	cpc	r15, r27
 556:	81 f4       	brne	.+32     	; 0x578 <LCDescribeDato+0x76>
 558:	03 c0       	rjmp	.+6      	; 0x560 <LCDescribeDato+0x5e>
		while(str[j]==0) j++;
 55a:	0f 5f       	subi	r16, 0xFF	; 255
 55c:	1f 4f       	sbci	r17, 0xFF	; 255
 55e:	02 c0       	rjmp	.+4      	; 0x564 <LCDescribeDato+0x62>
 560:	00 e0       	ldi	r16, 0x00	; 0
 562:	10 e0       	ldi	r17, 0x00	; 0
 564:	e1 e0       	ldi	r30, 0x01	; 1
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	ec 0f       	add	r30, r28
 56a:	fd 1f       	adc	r31, r29
 56c:	e0 0f       	add	r30, r16
 56e:	f1 1f       	adc	r31, r17
 570:	20 81       	ld	r18, Z
 572:	22 23       	and	r18, r18
 574:	91 f3       	breq	.-28     	; 0x55a <LCDescribeDato+0x58>
 576:	04 c0       	rjmp	.+8      	; 0x580 <LCDescribeDato+0x7e>
	else
		j=5-field_length;
 578:	05 e0       	ldi	r16, 0x05	; 5
 57a:	10 e0       	ldi	r17, 0x00	; 0
 57c:	0e 19       	sub	r16, r14
 57e:	1f 09       	sbc	r17, r15

	if(val<0) LCDsendChar('-');
 580:	99 23       	and	r25, r25
 582:	84 f4       	brge	.+32     	; 0x5a4 <LCDescribeDato+0xa2>
 584:	8d e2       	ldi	r24, 0x2D	; 45
 586:	0e 94 99 00 	call	0x132	; 0x132 <LCDsendChar>
 58a:	0c c0       	rjmp	.+24     	; 0x5a4 <LCDescribeDato+0xa2>
	for(i=j;i<5;i++)
	{
	LCDsendChar(48+str[i]);
 58c:	e1 e0       	ldi	r30, 0x01	; 1
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	ec 0f       	add	r30, r28
 592:	fd 1f       	adc	r31, r29
 594:	e0 0f       	add	r30, r16
 596:	f1 1f       	adc	r31, r17
 598:	80 81       	ld	r24, Z
 59a:	80 5d       	subi	r24, 0xD0	; 208
 59c:	0e 94 99 00 	call	0x132	; 0x132 <LCDsendChar>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
 5a0:	0f 5f       	subi	r16, 0xFF	; 255
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	05 30       	cpi	r16, 0x05	; 5
 5a6:	11 05       	cpc	r17, r1
 5a8:	8c f3       	brlt	.-30     	; 0x58c <LCDescribeDato+0x8a>
	{
	LCDsendChar(48+str[i]);
	}
}
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	08 95       	ret

000005c2 <main>:
int main(void)
{	
	uint8_t intRH,decRH,intT,decT,checkS,exito;
	uint8_t guardar, segsUn, segsDec, segs, i;
	//Inicio del LCD
	LCDinit();
 5c2:	0e 94 02 02 	call	0x404	; 0x404 <LCDinit>
	LCDclr();
 5c6:	0e 94 c5 01 	call	0x38a	; 0x38a <LCDclr>
	LCDGotoXY(0,0);
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 c9 01 	call	0x392	; 0x392 <LCDGotoXY>
	
    while (1) 
    {
		LCDclr();
 5d2:	0e 94 c5 01 	call	0x38a	; 0x38a <LCDclr>
		LCDGotoXY(0,0);
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 c9 01 	call	0x392	; 0x392 <LCDGotoXY>
		i2c_start();
 5de:	0e 94 73 00 	call	0xe6	; 0xe6 <i2c_start>
		i2c_write(0b11010001);
 5e2:	81 ed       	ldi	r24, 0xD1	; 209
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_write>
		guardar = i2c_read(8);
 5ea:	88 e0       	ldi	r24, 0x08	; 8
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_read>
 5f2:	c8 2f       	mov	r28, r24

		i2c_stop();
 5f4:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_stop>
		segsUn = guardar & 0b00001111;
 5f8:	9c 2f       	mov	r25, r28
 5fa:	9f 70       	andi	r25, 0x0F	; 15
		segsDec = guardar & 0b01110000;
 5fc:	c0 77       	andi	r28, 0x70	; 112
		segs = segsDec*10;
 5fe:	cc 0f       	add	r28, r28
 600:	8c 2f       	mov	r24, r28
 602:	88 0f       	add	r24, r24
 604:	88 0f       	add	r24, r24
 606:	c8 0f       	add	r28, r24
		segs = segs + segsUn;
 608:	89 2f       	mov	r24, r25
 60a:	8c 0f       	add	r24, r28
		LCDescribeDato(segs,2);
 60c:	62 e0       	ldi	r22, 0x02	; 2
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 81 02 	call	0x502	; 0x502 <LCDescribeDato>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 616:	2f ef       	ldi	r18, 0xFF	; 255
 618:	83 ed       	ldi	r24, 0xD3	; 211
 61a:	90 e3       	ldi	r25, 0x30	; 48
 61c:	21 50       	subi	r18, 0x01	; 1
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	e1 f7       	brne	.-8      	; 0x61c <main+0x5a>
 624:	00 c0       	rjmp	.+0      	; 0x626 <main+0x64>
 626:	00 00       	nop
 628:	d4 cf       	rjmp	.-88     	; 0x5d2 <main+0x10>

0000062a <__divmodhi4>:
 62a:	97 fb       	bst	r25, 7
 62c:	07 2e       	mov	r0, r23
 62e:	16 f4       	brtc	.+4      	; 0x634 <__divmodhi4+0xa>
 630:	00 94       	com	r0
 632:	07 d0       	rcall	.+14     	; 0x642 <__divmodhi4_neg1>
 634:	77 fd       	sbrc	r23, 7
 636:	09 d0       	rcall	.+18     	; 0x64a <__divmodhi4_neg2>
 638:	0e 94 29 03 	call	0x652	; 0x652 <__udivmodhi4>
 63c:	07 fc       	sbrc	r0, 7
 63e:	05 d0       	rcall	.+10     	; 0x64a <__divmodhi4_neg2>
 640:	3e f4       	brtc	.+14     	; 0x650 <__divmodhi4_exit>

00000642 <__divmodhi4_neg1>:
 642:	90 95       	com	r25
 644:	81 95       	neg	r24
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	08 95       	ret

0000064a <__divmodhi4_neg2>:
 64a:	70 95       	com	r23
 64c:	61 95       	neg	r22
 64e:	7f 4f       	sbci	r23, 0xFF	; 255

00000650 <__divmodhi4_exit>:
 650:	08 95       	ret

00000652 <__udivmodhi4>:
 652:	aa 1b       	sub	r26, r26
 654:	bb 1b       	sub	r27, r27
 656:	51 e1       	ldi	r21, 0x11	; 17
 658:	07 c0       	rjmp	.+14     	; 0x668 <__udivmodhi4_ep>

0000065a <__udivmodhi4_loop>:
 65a:	aa 1f       	adc	r26, r26
 65c:	bb 1f       	adc	r27, r27
 65e:	a6 17       	cp	r26, r22
 660:	b7 07       	cpc	r27, r23
 662:	10 f0       	brcs	.+4      	; 0x668 <__udivmodhi4_ep>
 664:	a6 1b       	sub	r26, r22
 666:	b7 0b       	sbc	r27, r23

00000668 <__udivmodhi4_ep>:
 668:	88 1f       	adc	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	5a 95       	dec	r21
 66e:	a9 f7       	brne	.-22     	; 0x65a <__udivmodhi4_loop>
 670:	80 95       	com	r24
 672:	90 95       	com	r25
 674:	bc 01       	movw	r22, r24
 676:	cd 01       	movw	r24, r26
 678:	08 95       	ret

0000067a <_exit>:
 67a:	f8 94       	cli

0000067c <__stop_program>:
 67c:	ff cf       	rjmp	.-2      	; 0x67c <__stop_program>
