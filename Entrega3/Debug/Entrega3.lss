
Entrega3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000007c0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018be  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a6c  00000000  00000000  0000229a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b75  00000000  00000000  00002d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d8  00000000  00000000  0000387c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000597  00000000  00000000  00003b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000126e  00000000  00000000  000040eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00005359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f7 e0       	ldi	r31, 0x07	; 7
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a6 32       	cpi	r26, 0x26	; 38
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 cb 02 	call	0x596	; 0x596 <main>
  ce:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <LCDsendChar>:
{
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
	}
}
  d6:	65 b1       	in	r22, 0x05	; 5
  d8:	98 2f       	mov	r25, r24
  da:	90 74       	andi	r25, 0x40	; 64
  dc:	49 2f       	mov	r20, r25
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	55 95       	asr	r21
  e2:	47 95       	ror	r20
  e4:	55 95       	asr	r21
  e6:	47 95       	ror	r20
  e8:	55 95       	asr	r21
  ea:	47 95       	ror	r20
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	98 2f       	mov	r25, r24
  f2:	90 78       	andi	r25, 0x80	; 128
  f4:	29 2f       	mov	r18, r25
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 2e       	mov	r0, r18
  fa:	23 2f       	mov	r18, r19
  fc:	00 0c       	add	r0, r0
  fe:	22 1f       	adc	r18, r18
 100:	33 0b       	sbc	r19, r19
 102:	00 0c       	add	r0, r0
 104:	22 1f       	adc	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	96 2f       	mov	r25, r22
 10a:	99 7f       	andi	r25, 0xF9	; 249
 10c:	49 2b       	or	r20, r25
 10e:	24 2b       	or	r18, r20
 110:	25 b9       	out	0x05, r18	; 5
 112:	68 b1       	in	r22, 0x08	; 8
 114:	98 2f       	mov	r25, r24
 116:	90 71       	andi	r25, 0x10	; 16
 118:	49 2f       	mov	r20, r25
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	55 95       	asr	r21
 11e:	47 95       	ror	r20
 120:	55 95       	asr	r21
 122:	47 95       	ror	r20
 124:	55 95       	asr	r21
 126:	47 95       	ror	r20
 128:	98 2f       	mov	r25, r24
 12a:	90 72       	andi	r25, 0x20	; 32
 12c:	29 2f       	mov	r18, r25
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	35 95       	asr	r19
 132:	27 95       	ror	r18
 134:	35 95       	asr	r19
 136:	27 95       	ror	r18
 138:	35 95       	asr	r19
 13a:	27 95       	ror	r18
 13c:	96 2f       	mov	r25, r22
 13e:	99 7f       	andi	r25, 0xF9	; 249
 140:	49 2b       	or	r20, r25
 142:	24 2b       	or	r18, r20
 144:	28 b9       	out	0x08, r18	; 8
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	92 60       	ori	r25, 0x02	; 2
 14a:	9b b9       	out	0x0b, r25	; 11
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	91 60       	ori	r25, 0x01	; 1
 150:	9b b9       	out	0x0b, r25	; 11
 152:	25 ed       	ldi	r18, 0xD5	; 213
 154:	2a 95       	dec	r18
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDsendChar+0x7e>
 158:	00 00       	nop
 15a:	9b b1       	in	r25, 0x0b	; 11
 15c:	9e 7f       	andi	r25, 0xFE	; 254
 15e:	9b b9       	out	0x0b, r25	; 11
 160:	9b b1       	in	r25, 0x0b	; 11
 162:	9d 7f       	andi	r25, 0xFD	; 253
 164:	9b b9       	out	0x0b, r25	; 11
 166:	95 ed       	ldi	r25, 0xD5	; 213
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDsendChar+0x92>
 16c:	00 00       	nop
 16e:	65 b1       	in	r22, 0x05	; 5
 170:	20 e1       	ldi	r18, 0x10	; 16
 172:	82 9f       	mul	r24, r18
 174:	c0 01       	movw	r24, r0
 176:	11 24       	eor	r1, r1
 178:	ac 01       	movw	r20, r24
 17a:	40 74       	andi	r20, 0x40	; 64
 17c:	55 27       	eor	r21, r21
 17e:	55 95       	asr	r21
 180:	47 95       	ror	r20
 182:	55 95       	asr	r21
 184:	47 95       	ror	r20
 186:	55 95       	asr	r21
 188:	47 95       	ror	r20
 18a:	55 95       	asr	r21
 18c:	47 95       	ror	r20
 18e:	9c 01       	movw	r18, r24
 190:	20 78       	andi	r18, 0x80	; 128
 192:	33 27       	eor	r19, r19
 194:	02 2e       	mov	r0, r18
 196:	23 2f       	mov	r18, r19
 198:	00 0c       	add	r0, r0
 19a:	22 1f       	adc	r18, r18
 19c:	33 0b       	sbc	r19, r19
 19e:	00 0c       	add	r0, r0
 1a0:	22 1f       	adc	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	36 2f       	mov	r19, r22
 1a6:	39 7f       	andi	r19, 0xF9	; 249
 1a8:	43 2b       	or	r20, r19
 1aa:	24 2b       	or	r18, r20
 1ac:	25 b9       	out	0x05, r18	; 5
 1ae:	48 b1       	in	r20, 0x08	; 8
 1b0:	9c 01       	movw	r18, r24
 1b2:	20 71       	andi	r18, 0x10	; 16
 1b4:	33 27       	eor	r19, r19
 1b6:	35 95       	asr	r19
 1b8:	27 95       	ror	r18
 1ba:	35 95       	asr	r19
 1bc:	27 95       	ror	r18
 1be:	35 95       	asr	r19
 1c0:	27 95       	ror	r18
 1c2:	80 72       	andi	r24, 0x20	; 32
 1c4:	99 27       	eor	r25, r25
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	94 2f       	mov	r25, r20
 1d4:	99 7f       	andi	r25, 0xF9	; 249
 1d6:	29 2b       	or	r18, r25
 1d8:	82 2b       	or	r24, r18
 1da:	88 b9       	out	0x08, r24	; 8
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	85 ed       	ldi	r24, 0xD5	; 213
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDsendChar+0x114>
 1ee:	00 00       	nop
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	8d 7f       	andi	r24, 0xFD	; 253
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	95 ed       	ldi	r25, 0xD5	; 213
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDsendChar+0x128>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <LCDsendCommand>:
 206:	65 b1       	in	r22, 0x05	; 5
 208:	98 2f       	mov	r25, r24
 20a:	90 74       	andi	r25, 0x40	; 64
 20c:	49 2f       	mov	r20, r25
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	55 95       	asr	r21
 212:	47 95       	ror	r20
 214:	55 95       	asr	r21
 216:	47 95       	ror	r20
 218:	55 95       	asr	r21
 21a:	47 95       	ror	r20
 21c:	55 95       	asr	r21
 21e:	47 95       	ror	r20
 220:	98 2f       	mov	r25, r24
 222:	90 78       	andi	r25, 0x80	; 128
 224:	29 2f       	mov	r18, r25
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	23 2f       	mov	r18, r19
 22c:	00 0c       	add	r0, r0
 22e:	22 1f       	adc	r18, r18
 230:	33 0b       	sbc	r19, r19
 232:	00 0c       	add	r0, r0
 234:	22 1f       	adc	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	96 2f       	mov	r25, r22
 23a:	99 7f       	andi	r25, 0xF9	; 249
 23c:	49 2b       	or	r20, r25
 23e:	24 2b       	or	r18, r20
 240:	25 b9       	out	0x05, r18	; 5
 242:	68 b1       	in	r22, 0x08	; 8
 244:	98 2f       	mov	r25, r24
 246:	90 71       	andi	r25, 0x10	; 16
 248:	49 2f       	mov	r20, r25
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	55 95       	asr	r21
 24e:	47 95       	ror	r20
 250:	55 95       	asr	r21
 252:	47 95       	ror	r20
 254:	55 95       	asr	r21
 256:	47 95       	ror	r20
 258:	98 2f       	mov	r25, r24
 25a:	90 72       	andi	r25, 0x20	; 32
 25c:	29 2f       	mov	r18, r25
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	35 95       	asr	r19
 262:	27 95       	ror	r18
 264:	35 95       	asr	r19
 266:	27 95       	ror	r18
 268:	35 95       	asr	r19
 26a:	27 95       	ror	r18
 26c:	96 2f       	mov	r25, r22
 26e:	99 7f       	andi	r25, 0xF9	; 249
 270:	49 2b       	or	r20, r25
 272:	24 2b       	or	r18, r20
 274:	28 b9       	out	0x08, r18	; 8
 276:	9b b1       	in	r25, 0x0b	; 11
 278:	91 60       	ori	r25, 0x01	; 1
 27a:	9b b9       	out	0x0b, r25	; 11
 27c:	ef e9       	ldi	r30, 0x9F	; 159
 27e:	ff e0       	ldi	r31, 0x0F	; 15
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCDsendCommand+0x7a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCDsendCommand+0x80>
 286:	00 00       	nop
 288:	9b b1       	in	r25, 0x0b	; 11
 28a:	9e 7f       	andi	r25, 0xFE	; 254
 28c:	9b b9       	out	0x0b, r25	; 11
 28e:	ef e9       	ldi	r30, 0x9F	; 159
 290:	ff e0       	ldi	r31, 0x0F	; 15
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCDsendCommand+0x8c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCDsendCommand+0x92>
 298:	00 00       	nop
 29a:	65 b1       	in	r22, 0x05	; 5
 29c:	f0 e1       	ldi	r31, 0x10	; 16
 29e:	8f 9f       	mul	r24, r31
 2a0:	c0 01       	movw	r24, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	ac 01       	movw	r20, r24
 2a6:	40 74       	andi	r20, 0x40	; 64
 2a8:	55 27       	eor	r21, r21
 2aa:	55 95       	asr	r21
 2ac:	47 95       	ror	r20
 2ae:	55 95       	asr	r21
 2b0:	47 95       	ror	r20
 2b2:	55 95       	asr	r21
 2b4:	47 95       	ror	r20
 2b6:	55 95       	asr	r21
 2b8:	47 95       	ror	r20
 2ba:	9c 01       	movw	r18, r24
 2bc:	20 78       	andi	r18, 0x80	; 128
 2be:	33 27       	eor	r19, r19
 2c0:	02 2e       	mov	r0, r18
 2c2:	23 2f       	mov	r18, r19
 2c4:	00 0c       	add	r0, r0
 2c6:	22 1f       	adc	r18, r18
 2c8:	33 0b       	sbc	r19, r19
 2ca:	00 0c       	add	r0, r0
 2cc:	22 1f       	adc	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	36 2f       	mov	r19, r22
 2d2:	39 7f       	andi	r19, 0xF9	; 249
 2d4:	43 2b       	or	r20, r19
 2d6:	24 2b       	or	r18, r20
 2d8:	25 b9       	out	0x05, r18	; 5
 2da:	48 b1       	in	r20, 0x08	; 8
 2dc:	9c 01       	movw	r18, r24
 2de:	20 71       	andi	r18, 0x10	; 16
 2e0:	33 27       	eor	r19, r19
 2e2:	35 95       	asr	r19
 2e4:	27 95       	ror	r18
 2e6:	35 95       	asr	r19
 2e8:	27 95       	ror	r18
 2ea:	35 95       	asr	r19
 2ec:	27 95       	ror	r18
 2ee:	80 72       	andi	r24, 0x20	; 32
 2f0:	99 27       	eor	r25, r25
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	94 2f       	mov	r25, r20
 300:	99 7f       	andi	r25, 0xF9	; 249
 302:	29 2b       	or	r18, r25
 304:	82 2b       	or	r24, r18
 306:	88 b9       	out	0x08, r24	; 8
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	8b b9       	out	0x0b, r24	; 11
 30e:	8f e9       	ldi	r24, 0x9F	; 159
 310:	9f e0       	ldi	r25, 0x0F	; 15
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCDsendCommand+0x10c>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCDsendCommand+0x112>
 318:	00 00       	nop
 31a:	8b b1       	in	r24, 0x0b	; 11
 31c:	8e 7f       	andi	r24, 0xFE	; 254
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	ef e9       	ldi	r30, 0x9F	; 159
 322:	ff e0       	ldi	r31, 0x0F	; 15
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCDsendCommand+0x11e>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCDsendCommand+0x124>
 32a:	00 00       	nop
 32c:	08 95       	ret

0000032e <LCDclr>:
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
 334:	08 95       	ret

00000336 <LCDstring>:
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	69 f0       	breq	.+26     	; 0x35c <LCDstring+0x26>
 342:	d6 2f       	mov	r29, r22
 344:	8c 01       	movw	r16, r24
 346:	c0 e0       	ldi	r28, 0x00	; 0
 348:	07 c0       	rjmp	.+14     	; 0x358 <LCDstring+0x22>
 34a:	f8 01       	movw	r30, r16
 34c:	ec 0f       	add	r30, r28
 34e:	f1 1d       	adc	r31, r1
 350:	80 81       	ld	r24, Z
 352:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
 356:	cf 5f       	subi	r28, 0xFF	; 255
 358:	cd 17       	cp	r28, r29
 35a:	b8 f3       	brcs	.-18     	; 0x34a <LCDstring+0x14>
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <LCDGotoXY>:
 366:	62 30       	cpi	r22, 0x02	; 2
 368:	31 f0       	breq	.+12     	; 0x376 <LCDGotoXY+0x10>
 36a:	63 30       	cpi	r22, 0x03	; 3
 36c:	31 f0       	breq	.+12     	; 0x37a <LCDGotoXY+0x14>
 36e:	61 30       	cpi	r22, 0x01	; 1
 370:	29 f4       	brne	.+10     	; 0x37c <LCDGotoXY+0x16>
 372:	80 5c       	subi	r24, 0xC0	; 192
 374:	03 c0       	rjmp	.+6      	; 0x37c <LCDGotoXY+0x16>
 376:	8c 5e       	subi	r24, 0xEC	; 236
 378:	01 c0       	rjmp	.+2      	; 0x37c <LCDGotoXY+0x16>
 37a:	8c 5a       	subi	r24, 0xAC	; 172
 37c:	80 68       	ori	r24, 0x80	; 128
 37e:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
 382:	08 95       	ret

00000384 <LCDdefinechar>:
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	7c 01       	movw	r14, r24
 392:	86 2f       	mov	r24, r22
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	c0 e0       	ldi	r28, 0x00	; 0
 3a6:	d0 e0       	ldi	r29, 0x00	; 0
 3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <LCDdefinechar+0x40>
 3aa:	f7 01       	movw	r30, r14
 3ac:	ec 0f       	add	r30, r28
 3ae:	fd 1f       	adc	r31, r29
 3b0:	14 91       	lpm	r17, Z
 3b2:	01 e0       	ldi	r16, 0x01	; 1
 3b4:	08 0f       	add	r16, r24
 3b6:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
 3ba:	81 2f       	mov	r24, r17
 3bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
 3c0:	21 96       	adiw	r28, 0x01	; 1
 3c2:	80 2f       	mov	r24, r16
 3c4:	c8 30       	cpi	r28, 0x08	; 8
 3c6:	d1 05       	cpc	r29, r1
 3c8:	80 f3       	brcs	.-32     	; 0x3aa <LCDdefinechar+0x26>
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <LCDinit>:
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	8f e5       	ldi	r24, 0x5F	; 95
 3de:	9a ee       	ldi	r25, 0xEA	; 234
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCDinit+0x8>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCDinit+0xe>
 3e6:	00 00       	nop
 3e8:	85 b1       	in	r24, 0x05	; 5
 3ea:	89 7f       	andi	r24, 0xF9	; 249
 3ec:	85 b9       	out	0x05, r24	; 5
 3ee:	88 b1       	in	r24, 0x08	; 8
 3f0:	89 7f       	andi	r24, 0xF9	; 249
 3f2:	88 b9       	out	0x08, r24	; 8
 3f4:	1b b8       	out	0x0b, r1	; 11
 3f6:	87 b1       	in	r24, 0x07	; 7
 3f8:	86 60       	ori	r24, 0x06	; 6
 3fa:	87 b9       	out	0x07, r24	; 7
 3fc:	84 b1       	in	r24, 0x04	; 4
 3fe:	86 60       	ori	r24, 0x06	; 6
 400:	84 b9       	out	0x04, r24	; 4
 402:	84 b1       	in	r24, 0x04	; 4
 404:	86 60       	ori	r24, 0x06	; 6
 406:	84 b9       	out	0x04, r24	; 4
 408:	87 b1       	in	r24, 0x07	; 7
 40a:	86 60       	ori	r24, 0x06	; 6
 40c:	87 b9       	out	0x07, r24	; 7
 40e:	8a b1       	in	r24, 0x0a	; 10
 410:	83 60       	ori	r24, 0x03	; 3
 412:	8a b9       	out	0x0a, r24	; 10
 414:	85 b1       	in	r24, 0x05	; 5
 416:	89 7f       	andi	r24, 0xF9	; 249
 418:	85 b9       	out	0x05, r24	; 5
 41a:	88 b1       	in	r24, 0x08	; 8
 41c:	86 60       	ori	r24, 0x06	; 6
 41e:	88 b9       	out	0x08, r24	; 8
 420:	8b b1       	in	r24, 0x0b	; 11
 422:	81 60       	ori	r24, 0x01	; 1
 424:	8b b9       	out	0x0b, r24	; 11
 426:	8f e9       	ldi	r24, 0x9F	; 159
 428:	9f e0       	ldi	r25, 0x0F	; 15
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	8b b1       	in	r24, 0x0b	; 11
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	8b b9       	out	0x0b, r24	; 11
 438:	8f e9       	ldi	r24, 0x9F	; 159
 43a:	9f e0       	ldi	r25, 0x0F	; 15
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	85 b1       	in	r24, 0x05	; 5
 446:	89 7f       	andi	r24, 0xF9	; 249
 448:	85 b9       	out	0x05, r24	; 5
 44a:	88 b1       	in	r24, 0x08	; 8
 44c:	86 60       	ori	r24, 0x06	; 6
 44e:	88 b9       	out	0x08, r24	; 8
 450:	8b b1       	in	r24, 0x0b	; 11
 452:	81 60       	ori	r24, 0x01	; 1
 454:	8b b9       	out	0x0b, r24	; 11
 456:	8f e9       	ldi	r24, 0x9F	; 159
 458:	9f e0       	ldi	r25, 0x0F	; 15
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 460:	00 00       	nop
 462:	8b b1       	in	r24, 0x0b	; 11
 464:	8e 7f       	andi	r24, 0xFE	; 254
 466:	8b b9       	out	0x0b, r24	; 11
 468:	8f e9       	ldi	r24, 0x9F	; 159
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 472:	00 00       	nop
 474:	85 b1       	in	r24, 0x05	; 5
 476:	89 7f       	andi	r24, 0xF9	; 249
 478:	85 b9       	out	0x05, r24	; 5
 47a:	88 b1       	in	r24, 0x08	; 8
 47c:	89 7f       	andi	r24, 0xF9	; 249
 47e:	84 60       	ori	r24, 0x04	; 4
 480:	88 b9       	out	0x08, r24	; 8
 482:	8b b1       	in	r24, 0x0b	; 11
 484:	81 60       	ori	r24, 0x01	; 1
 486:	8b b9       	out	0x0b, r24	; 11
 488:	8f e9       	ldi	r24, 0x9F	; 159
 48a:	9f e0       	ldi	r25, 0x0F	; 15
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 492:	00 00       	nop
 494:	8b b1       	in	r24, 0x0b	; 11
 496:	8e 7f       	andi	r24, 0xFE	; 254
 498:	8b b9       	out	0x0b, r24	; 11
 49a:	8f e9       	ldi	r24, 0x9F	; 159
 49c:	9f e0       	ldi	r25, 0x0F	; 15
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
 4a6:	88 e2       	ldi	r24, 0x28	; 40
 4a8:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
 4ac:	8c e0       	ldi	r24, 0x0C	; 12
 4ae:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	0a c0       	rjmp	.+20     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4b8:	d1 e0       	ldi	r29, 0x01	; 1
 4ba:	d6 0f       	add	r29, r22
 4bc:	8c 2f       	mov	r24, r28
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	88 59       	subi	r24, 0x98	; 152
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	0e 94 c2 01 	call	0x384	; 0x384 <LCDdefinechar>
 4c8:	c8 5f       	subi	r28, 0xF8	; 248
 4ca:	6d 2f       	mov	r22, r29
 4cc:	c0 34       	cpi	r28, 0x40	; 64
 4ce:	a0 f3       	brcs	.-24     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <LCDescribeDato>:


//**********   Inicio de Comando Agregado por Fido

void LCDescribeDato(int val,unsigned int field_length)
{
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <LCDescribeDato+0xe>
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <LCDescribeDato+0x10>
 4e6:	1f 92       	push	r1
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 4ee:	fe 01       	movw	r30, r28
 4f0:	31 96       	adiw	r30, 0x01	; 1
 4f2:	25 e0       	ldi	r18, 0x05	; 5
 4f4:	df 01       	movw	r26, r30
 4f6:	1d 92       	st	X+, r1
 4f8:	2a 95       	dec	r18
 4fa:	e9 f7       	brne	.-6      	; 0x4f6 <LCDescribeDato+0x20>
	int i=4,j=0;
 4fc:	24 e0       	ldi	r18, 0x04	; 4
 4fe:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 500:	0f c0       	rjmp	.+30     	; 0x520 <LCDescribeDato+0x4a>
	{
	str[i]=val%10;
 502:	6a e0       	ldi	r22, 0x0A	; 10
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	0e 94 b6 03 	call	0x76c	; 0x76c <__divmodhi4>
 50a:	e1 e0       	ldi	r30, 0x01	; 1
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	ec 0f       	add	r30, r28
 510:	fd 1f       	adc	r31, r29
 512:	e2 0f       	add	r30, r18
 514:	f3 1f       	adc	r31, r19
 516:	80 83       	st	Z, r24
	val=val/10;
 518:	86 2f       	mov	r24, r22
 51a:	97 2f       	mov	r25, r23
	i--;
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	79 f7       	brne	.-34     	; 0x502 <LCDescribeDato+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 524:	bf ef       	ldi	r27, 0xFF	; 255
 526:	eb 16       	cp	r14, r27
 528:	fb 06       	cpc	r15, r27
 52a:	81 f4       	brne	.+32     	; 0x54c <LCDescribeDato+0x76>
 52c:	03 c0       	rjmp	.+6      	; 0x534 <LCDescribeDato+0x5e>
		while(str[j]==0) j++;
 52e:	0f 5f       	subi	r16, 0xFF	; 255
 530:	1f 4f       	sbci	r17, 0xFF	; 255
 532:	02 c0       	rjmp	.+4      	; 0x538 <LCDescribeDato+0x62>
 534:	00 e0       	ldi	r16, 0x00	; 0
 536:	10 e0       	ldi	r17, 0x00	; 0
 538:	e1 e0       	ldi	r30, 0x01	; 1
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ec 0f       	add	r30, r28
 53e:	fd 1f       	adc	r31, r29
 540:	e0 0f       	add	r30, r16
 542:	f1 1f       	adc	r31, r17
 544:	20 81       	ld	r18, Z
 546:	22 23       	and	r18, r18
 548:	91 f3       	breq	.-28     	; 0x52e <LCDescribeDato+0x58>
 54a:	04 c0       	rjmp	.+8      	; 0x554 <LCDescribeDato+0x7e>
	else
		j=5-field_length;
 54c:	05 e0       	ldi	r16, 0x05	; 5
 54e:	10 e0       	ldi	r17, 0x00	; 0
 550:	0e 19       	sub	r16, r14
 552:	1f 09       	sbc	r17, r15

	if(val<0) LCDsendChar('-');
 554:	99 23       	and	r25, r25
 556:	84 f4       	brge	.+32     	; 0x578 <LCDescribeDato+0xa2>
 558:	8d e2       	ldi	r24, 0x2D	; 45
 55a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
 55e:	0c c0       	rjmp	.+24     	; 0x578 <LCDescribeDato+0xa2>
	for(i=j;i<5;i++)
	{
	LCDsendChar(48+str[i]);
 560:	e1 e0       	ldi	r30, 0x01	; 1
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	ec 0f       	add	r30, r28
 566:	fd 1f       	adc	r31, r29
 568:	e0 0f       	add	r30, r16
 56a:	f1 1f       	adc	r31, r17
 56c:	80 81       	ld	r24, Z
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
 574:	0f 5f       	subi	r16, 0xFF	; 255
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	05 30       	cpi	r16, 0x05	; 5
 57a:	11 05       	cpc	r17, r1
 57c:	8c f3       	brlt	.-30     	; 0x560 <LCDescribeDato+0x8a>
	{
	LCDsendChar(48+str[i]);
	}
}
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	08 95       	ret

00000596 <main>:
//void leer8B(uint8_t*);



int main(void)
{
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	00 d0       	rcall	.+0      	; 0x59c <main+0x6>
 59c:	00 d0       	rcall	.+0      	; 0x59e <main+0x8>
 59e:	1f 92       	push	r1
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
	
	
	//------Sensor's signal-----
	//DDRC se configura como entrada para recibir respuesta del sensor
	uint8_t intRH,decRH,intT,decT,checkS,exito;
	DDRC &= ~(1<<PINC0);
 5a4:	87 b1       	in	r24, 0x07	; 7
 5a6:	8e 7f       	andi	r24, 0xFE	; 254
 5a8:	87 b9       	out	0x07, r24	; 7
	LCDinit();
 5aa:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LCDinit>
	LCDclr();
 5ae:	0e 94 97 01 	call	0x32e	; 0x32e <LCDclr>
	LCDGotoXY(0,0);
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0e 94 b3 01 	call	0x366	; 0x366 <LCDGotoXY>
	
	LCDstring("asd",3);
 5ba:	63 e0       	ldi	r22, 0x03	; 3
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 9b 01 	call	0x336	; 0x336 <LCDstring>
    while (1) 
    {
		
		exito=pedirTH(&intRH,&decRH,&intT,&decT,&checkS);
 5c4:	8e 01       	movw	r16, r28
 5c6:	0b 5f       	subi	r16, 0xFB	; 251
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	9e 01       	movw	r18, r28
 5cc:	2c 5f       	subi	r18, 0xFC	; 252
 5ce:	3f 4f       	sbci	r19, 0xFF	; 255
 5d0:	ae 01       	movw	r20, r28
 5d2:	4d 5f       	subi	r20, 0xFD	; 253
 5d4:	5f 4f       	sbci	r21, 0xFF	; 255
 5d6:	be 01       	movw	r22, r28
 5d8:	6e 5f       	subi	r22, 0xFE	; 254
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	ce 01       	movw	r24, r28
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <pedirTH>
		if(exito){
 5e4:	88 23       	and	r24, r24
 5e6:	79 f1       	breq	.+94     	; 0x646 <main+0xb0>
			LCDclr();
 5e8:	0e 94 97 01 	call	0x32e	; 0x32e <LCDclr>
			LCDstring("TEMP: ",6);
 5ec:	66 e0       	ldi	r22, 0x06	; 6
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	0e 94 9b 01 	call	0x336	; 0x336 <LCDstring>
			LCDescribeDato(intT,2);
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	62 e0       	ldi	r22, 0x02	; 2
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDescribeDato>
			LCDsendChar(',');
 602:	8c e2       	ldi	r24, 0x2C	; 44
 604:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
			LCDescribeDato(decT,2);
 608:	8c 81       	ldd	r24, Y+4	; 0x04
 60a:	62 e0       	ldi	r22, 0x02	; 2
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDescribeDato>
			LCDGotoXY(0,1);
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	0e 94 b3 01 	call	0x366	; 0x366 <LCDGotoXY>
			LCDstring("HUMEDAD: ",9);
 61c:	69 e0       	ldi	r22, 0x09	; 9
 61e:	8b e0       	ldi	r24, 0x0B	; 11
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 9b 01 	call	0x336	; 0x336 <LCDstring>
			LCDescribeDato(intRH,2);
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	62 e0       	ldi	r22, 0x02	; 2
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDescribeDato>
			LCDsendChar(',');
 632:	8c e2       	ldi	r24, 0x2C	; 44
 634:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
			LCDescribeDato(decRH,2);
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	62 e0       	ldi	r22, 0x02	; 2
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LCDescribeDato>
 644:	05 c0       	rjmp	.+10     	; 0x650 <main+0xba>
		}else{
			LCDstring("Error en lectura",16);
 646:	60 e1       	ldi	r22, 0x10	; 16
 648:	85 e1       	ldi	r24, 0x15	; 21
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 9b 01 	call	0x336	; 0x336 <LCDstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 650:	2f ef       	ldi	r18, 0xFF	; 255
 652:	87 ea       	ldi	r24, 0xA7	; 167
 654:	91 e6       	ldi	r25, 0x61	; 97
 656:	21 50       	subi	r18, 0x01	; 1
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	90 40       	sbci	r25, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0xc0>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0xca>
 660:	00 00       	nop
		}
		_delay_ms(2000);
		LCDGotoXY(0,0);		
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 b3 01 	call	0x366	; 0x366 <LCDGotoXY>
    }
 66a:	ac cf       	rjmp	.-168    	; 0x5c4 <main+0x2e>

0000066c <leer8B>:
	sum=(*intRH)+(*decRH)+(*intT)+(*decT);

	return sum==(*checkS);
}

void leer8B(uint8_t* auxBits){
 66c:	fc 01       	movw	r30, r24
	int i;
	*auxBits=0;
 66e:	10 82       	st	Z, r1
	for(i=0;i<8;i++){
 670:	20 e0       	ldi	r18, 0x00	; 0
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	1b c0       	rjmp	.+54     	; 0x6ac <leer8B+0x40>
		while((PINC & (1<<PINC0))==0){}
 676:	30 9b       	sbis	0x06, 0	; 6
 678:	fe cf       	rjmp	.-4      	; 0x676 <leer8B+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67a:	85 ed       	ldi	r24, 0xD5	; 213
 67c:	8a 95       	dec	r24
 67e:	f1 f7       	brne	.-4      	; 0x67c <leer8B+0x10>
 680:	00 00       	nop
		_delay_us(40);
		if((PINC & (1<<PINC0))==1){
 682:	30 9b       	sbis	0x06, 0	; 6
 684:	11 c0       	rjmp	.+34     	; 0x6a8 <leer8B+0x3c>
			*auxBits |= (1<<(7-i));
 686:	67 e0       	ldi	r22, 0x07	; 7
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	62 1b       	sub	r22, r18
 68c:	73 0b       	sbc	r23, r19
 68e:	41 e0       	ldi	r20, 0x01	; 1
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <leer8B+0x2c>
 694:	44 0f       	add	r20, r20
 696:	55 1f       	adc	r21, r21
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <leer8B+0x28>
 69c:	80 81       	ld	r24, Z
 69e:	48 2b       	or	r20, r24
 6a0:	40 83       	st	Z, r20
 6a2:	80 ea       	ldi	r24, 0xA0	; 160
 6a4:	8a 95       	dec	r24
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <leer8B+0x38>
}

void leer8B(uint8_t* auxBits){
	int i;
	*auxBits=0;
	for(i=0;i<8;i++){
 6a8:	2f 5f       	subi	r18, 0xFF	; 255
 6aa:	3f 4f       	sbci	r19, 0xFF	; 255
 6ac:	28 30       	cpi	r18, 0x08	; 8
 6ae:	31 05       	cpc	r19, r1
 6b0:	14 f3       	brlt	.-60     	; 0x676 <leer8B+0xa>
		if((PINC & (1<<PINC0))==1){
			*auxBits |= (1<<(7-i));
			_delay_us(30);
		}
	}
}
 6b2:	08 95       	ret

000006b4 <pedirTH>:
#include "sensor.h"

uint8_t pedirTH(uint8_t* intRH, uint8_t* decRH, uint8_t* intT,uint8_t* decT, uint8_t* checkS ){
 6b4:	af 92       	push	r10
 6b6:	bf 92       	push	r11
 6b8:	cf 92       	push	r12
 6ba:	df 92       	push	r13
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	5c 01       	movw	r10, r24
 6ca:	6b 01       	movw	r12, r22
 6cc:	7a 01       	movw	r14, r20
 6ce:	e9 01       	movw	r28, r18
	uint8_t sum=0,i;
	
	DDRC |= (1<<PINC0);
 6d0:	87 b1       	in	r24, 0x07	; 7
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PINC0);
 6d6:	88 b1       	in	r24, 0x08	; 8
 6d8:	81 60       	ori	r24, 0x01	; 1
 6da:	88 b9       	out	0x08, r24	; 8
 6dc:	2a e1       	ldi	r18, 0x1A	; 26
 6de:	2a 95       	dec	r18
 6e0:	f1 f7       	brne	.-4      	; 0x6de <pedirTH+0x2a>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <pedirTH+0x30>
	_delay_us(5);
	PORTC &= ~(1<<PINC0);
 6e4:	88 b1       	in	r24, 0x08	; 8
 6e6:	8e 7f       	andi	r24, 0xFE	; 254
 6e8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	90 ee       	ldi	r25, 0xE0	; 224
 6ee:	e0 e0       	ldi	r30, 0x00	; 0
 6f0:	81 50       	subi	r24, 0x01	; 1
 6f2:	90 40       	sbci	r25, 0x00	; 0
 6f4:	e0 40       	sbci	r30, 0x00	; 0
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <pedirTH+0x3c>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <pedirTH+0x46>
 6fa:	00 00       	nop
	_delay_ms(18);
	PORTC |= (1<<PINC0);
 6fc:	88 b1       	in	r24, 0x08	; 8
 6fe:	81 60       	ori	r24, 0x01	; 1
 700:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 702:	f0 ea       	ldi	r31, 0xA0	; 160
 704:	fa 95       	dec	r31
 706:	f1 f7       	brne	.-4      	; 0x704 <pedirTH+0x50>
	_delay_us(30);
	
	DDRC &= ~(1<<PINC0);
 708:	87 b1       	in	r24, 0x07	; 7
 70a:	8e 7f       	andi	r24, 0xFE	; 254
 70c:	87 b9       	out	0x07, r24	; 7
 70e:	8f e7       	ldi	r24, 0x7F	; 127
 710:	92 e0       	ldi	r25, 0x02	; 2
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <pedirTH+0x5e>
 716:	00 c0       	rjmp	.+0      	; 0x718 <pedirTH+0x64>
 718:	00 00       	nop
	_delay_us(160);
	
	leer8B(intRH);
 71a:	c5 01       	movw	r24, r10
 71c:	0e 94 36 03 	call	0x66c	; 0x66c <leer8B>
	leer8B(decRH);
 720:	c6 01       	movw	r24, r12
 722:	0e 94 36 03 	call	0x66c	; 0x66c <leer8B>
	leer8B(intT);
 726:	c7 01       	movw	r24, r14
 728:	0e 94 36 03 	call	0x66c	; 0x66c <leer8B>
	leer8B(decT);
 72c:	ce 01       	movw	r24, r28
 72e:	0e 94 36 03 	call	0x66c	; 0x66c <leer8B>
	leer8B(checkS);
 732:	c8 01       	movw	r24, r16
 734:	0e 94 36 03 	call	0x66c	; 0x66c <leer8B>
	
	sum=(*intRH)+(*decRH)+(*intT)+(*decT);
 738:	f5 01       	movw	r30, r10
 73a:	30 81       	ld	r19, Z
 73c:	f6 01       	movw	r30, r12
 73e:	90 81       	ld	r25, Z
 740:	f7 01       	movw	r30, r14
 742:	20 81       	ld	r18, Z
 744:	88 81       	ld	r24, Y
 746:	93 0f       	add	r25, r19
 748:	92 0f       	add	r25, r18
 74a:	98 0f       	add	r25, r24

	return sum==(*checkS);
 74c:	f8 01       	movw	r30, r16
 74e:	20 81       	ld	r18, Z
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	92 13       	cpse	r25, r18
 754:	80 e0       	ldi	r24, 0x00	; 0
}
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	ff 90       	pop	r15
 760:	ef 90       	pop	r14
 762:	df 90       	pop	r13
 764:	cf 90       	pop	r12
 766:	bf 90       	pop	r11
 768:	af 90       	pop	r10
 76a:	08 95       	ret

0000076c <__divmodhi4>:
 76c:	97 fb       	bst	r25, 7
 76e:	07 2e       	mov	r0, r23
 770:	16 f4       	brtc	.+4      	; 0x776 <__divmodhi4+0xa>
 772:	00 94       	com	r0
 774:	07 d0       	rcall	.+14     	; 0x784 <__divmodhi4_neg1>
 776:	77 fd       	sbrc	r23, 7
 778:	09 d0       	rcall	.+18     	; 0x78c <__divmodhi4_neg2>
 77a:	0e 94 ca 03 	call	0x794	; 0x794 <__udivmodhi4>
 77e:	07 fc       	sbrc	r0, 7
 780:	05 d0       	rcall	.+10     	; 0x78c <__divmodhi4_neg2>
 782:	3e f4       	brtc	.+14     	; 0x792 <__divmodhi4_exit>

00000784 <__divmodhi4_neg1>:
 784:	90 95       	com	r25
 786:	81 95       	neg	r24
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__divmodhi4_neg2>:
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255

00000792 <__divmodhi4_exit>:
 792:	08 95       	ret

00000794 <__udivmodhi4>:
 794:	aa 1b       	sub	r26, r26
 796:	bb 1b       	sub	r27, r27
 798:	51 e1       	ldi	r21, 0x11	; 17
 79a:	07 c0       	rjmp	.+14     	; 0x7aa <__udivmodhi4_ep>

0000079c <__udivmodhi4_loop>:
 79c:	aa 1f       	adc	r26, r26
 79e:	bb 1f       	adc	r27, r27
 7a0:	a6 17       	cp	r26, r22
 7a2:	b7 07       	cpc	r27, r23
 7a4:	10 f0       	brcs	.+4      	; 0x7aa <__udivmodhi4_ep>
 7a6:	a6 1b       	sub	r26, r22
 7a8:	b7 0b       	sbc	r27, r23

000007aa <__udivmodhi4_ep>:
 7aa:	88 1f       	adc	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	5a 95       	dec	r21
 7b0:	a9 f7       	brne	.-22     	; 0x79c <__udivmodhi4_loop>
 7b2:	80 95       	com	r24
 7b4:	90 95       	com	r25
 7b6:	bc 01       	movw	r22, r24
 7b8:	cd 01       	movw	r24, r26
 7ba:	08 95       	ret

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
